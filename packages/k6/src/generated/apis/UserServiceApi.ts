/* tslint:disable */
/* eslint-disable */
/**
 * Account Viewer
 * Account Viewer API description
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CreateUserRequestBody,
  UpdateUserRequestBody,
} from '../models';
import {
    CreateUserRequestBodyFromJSON,
    CreateUserRequestBodyToJSON,
    UpdateUserRequestBodyFromJSON,
    UpdateUserRequestBodyToJSON,
} from '../models';

export interface UserControllerCreateRequest {
    createUserRequestBody: CreateUserRequestBody;
}

export interface UserControllerDeactivateRequest {
    userId: string;
}

export interface UserControllerGetRequest {
    userId: string;
}

export interface UserControllerListRequest {
    page?: number;
    perPage?: number;
}

export interface UserControllerUpdateRequest {
    userId: string;
    updateUserRequestBody: UpdateUserRequestBody;
}

/**
 * 
 */
export class UserServiceApi extends runtime.BaseAPI {

    /**
     * Create a new user
     */
    async userControllerCreateRaw(requestParameters: UserControllerCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.createUserRequestBody === null || requestParameters.createUserRequestBody === undefined) {
            throw new runtime.RequiredError('createUserRequestBody','Required parameter requestParameters.createUserRequestBody was null or undefined when calling userControllerCreate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/users`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateUserRequestBodyToJSON(requestParameters.createUserRequestBody),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Create a new user
     */
    async userControllerCreate(requestParameters: UserControllerCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.userControllerCreateRaw(requestParameters, initOverrides);
    }

    /**
     * Delete a user
     */
    async userControllerDeactivateRaw(requestParameters: UserControllerDeactivateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling userControllerDeactivate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/users/{userId}`.replace(`{${":userId"}}`, encodeURIComponent(String(requestParameters.userId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete a user
     */
    async userControllerDeactivate(requestParameters: UserControllerDeactivateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.userControllerDeactivateRaw(requestParameters, initOverrides);
    }

    /**
     * Get a user
     */
    async userControllerGetRaw(requestParameters: UserControllerGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling userControllerGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/users/{userId}`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters.userId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Get a user
     */
    async userControllerGet(requestParameters: UserControllerGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.userControllerGetRaw(requestParameters, initOverrides);
    }

    /**
     * List users
     */
    async userControllerListRaw(requestParameters: UserControllerListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.perPage !== undefined) {
            queryParameters['perPage'] = requestParameters.perPage;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/users`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * List users
     */
    async userControllerList(requestParameters: UserControllerListRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.userControllerListRaw(requestParameters, initOverrides);
    }

    /**
     * Update a user
     */
    async userControllerUpdateRaw(requestParameters: UserControllerUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling userControllerUpdate.');
        }

        if (requestParameters.updateUserRequestBody === null || requestParameters.updateUserRequestBody === undefined) {
            throw new runtime.RequiredError('updateUserRequestBody','Required parameter requestParameters.updateUserRequestBody was null or undefined when calling userControllerUpdate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/users/{userId}`.replace(`{${":userId"}}`, encodeURIComponent(String(requestParameters.userId))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateUserRequestBodyToJSON(requestParameters.updateUserRequestBody),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Update a user
     */
    async userControllerUpdate(requestParameters: UserControllerUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.userControllerUpdateRaw(requestParameters, initOverrides);
    }

}
